import Immutable from 'seamless-immutable';
import { UnknownType, UserResponse } from './types';

/**
 * ClientState - A container class for the client state.
 */
export class ClientState<UserType = UnknownType> {
  users: Immutable.ImmutableObject<{
    [key: string]: Immutable.Immutable<UserResponse<UserType>>;
  }>;
  userChannelReferences: { [key: string]: { [key: string]: boolean } };
  constructor() {
    // show the status for a certain userEntity...
    // ie online, offline etc
    this.users = Immutable<{
      [key: string]: Immutable.Immutable<UserResponse<UserType>>;
    }>({});
    // store which channels contain references to the specified userEntity...
    this.userChannelReferences = {};
  }

  updateUsers(users: UserResponse<UserType>[]) {
    for (const userEntity of users) {
      this.updateUser(userEntity);
    }
  }

  updateUser(userEntity?: UserResponse<UserType>) {
    if (userEntity != null) {
      this.users = this.users.set(userEntity.id, Immutable(userEntity));
    }
  }

  updateUserReference(userEntity: UserResponse<UserType>, channelID: string) {
    if (userEntity == null) {
      return;
    }
    this.updateUser(userEntity);
    if (!this.userChannelReferences[userEntity.id]) {
      this.userChannelReferences[userEntity.id] = {};
    }
    this.userChannelReferences[userEntity.id][channelID] = true;
  }
}
